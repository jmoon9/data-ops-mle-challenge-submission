def paramMap = [:]

pipeline {
    agent any

    parameters {
        choice(name: 'ACTION', choices: "plan\napply\ndestroy")
        choice(name: 'ENVIRONMENT', choices: "dev\nuat\nprod")
        choice(name: 'TARGET_AWS_ACCOUNT_NUMBER', choices: '683339921237')
        string(name: 'ECR_REGISTRY_ID', defaultValue: 'bitcoin-predictor')
        string(name: 'ECR_REGISTRY_CREDENTIAL_ID', defaultValue: 'jenkins-bitcoin-predictor-user')
        string(name: 'AWS_REGION', defaultValue: 'us-east-2')
    }
    environment{
        
        image = ''
        ecrRepository = "${params.TARGET_AWS_ACCOUNT_NUMBER}.dkr.ecr.${params.AWS_REGION}.amazonaws.com/${params.ECR_REGISTRY_ID}"
    }
    stages{
        stage('Build Docker Image') {
            steps {
                script {
                    image = docker.build(ecrRepository, '.')
                }
            }
        }
        stage('Push Image to ECR'){
            steps{
                script {
                    docker.withRegistry("https://" + ecrRepository, 'ecr:us-east-2:' + params.ECR_REGISTRY_CREDENTIAL_ID){
                        image.push('latest')
                    }
                }
            }
        }
        stage('Load Parameters') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'terraform-user']]){
                    script {
                        paramMap.put('aws_access_key', accessKeyVariable)
                        paramMap.put('aws_secret_access_key', secretKeyVariable)
                        paramMap.put('environment', params.ENVIRONMENT)
                    }
                }
            }
        }
        stage('Terraform') {
            steps {
                sh 'terraform init'
                sh 'terraform plan -var ${paramMap}'
            }
        }
    }
}